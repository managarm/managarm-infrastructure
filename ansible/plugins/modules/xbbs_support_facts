#!/usr/bin/python
# SPDX-License-Identifier: AGPL-3.0-only
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

DOCUMENTATION = r'''
---
module: xbbs_support_facts

short_description: Collecs xbbs supporting facts

version_added: "1.0.0"

description: Collects facts about capabilities XBBS workers might have or lack.

author:
    - Arsen ArsenoviÄ‡ <arsen@aarsen.me>
'''

EXAMPLES = r'''
- name: Collect xbbs-related facts
  xbbs_support_facts: ~
'''

RETURN = r'''
ansible_facts:
  description: Facts to add to ansible_facts.
  returned: always
  type: dict
  contains:
    has_kvm:
      description: Probes whether the remote system has KVM
      type: bool
      returned: always
      sample: True
    has_fuse:
      description: Probes whether the remote system has FUSE
      type: bool
      returned: always
      sample: True
'''

from ansible.module_utils.basic import AnsibleModule
import os


def run_module():
    # define available arguments/parameters a user can pass to the module
    module_args = dict()

    # seed the result dict in the object
    # we primarily care about changed and state
    # changed is if this module effectively modified the target
    # state will include any data that you want your module to pass back
    # for consumption, for example, in a subsequent task
    result = dict(
        changed=False,
        ansible_facts=dict(),
    )

    # the AnsibleModule object will be our abstraction working with Ansible
    # this includes instantiation, a couple of common attr would be the
    # args/params passed to the execution, as well as if the module
    # supports check mode
    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True
    )

    # if the user is working with this module in only check mode we do not
    # want to make any changes to the environment, just return the current
    # state with no modifications
    if module.check_mode:
        module.exit_json(**result)

    # manipulate or modify the state as needed (this is going to be the
    # part where your module will do what it needs to do)
    result['ansible_facts'] = {
        'has_kvm': os.access("/dev/kvm", os.W_OK),
        'has_fuse': os.access("/dev/fuse", os.W_OK),
    }
    # in the event of a successful module execution, you will want to
    # simple AnsibleModule.exit_json(), passing the key/value results
    module.exit_json(**result)


def main():
    run_module()


if __name__ == '__main__':
    main()
